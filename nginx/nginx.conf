worker_processes auto;

events {
    worker_connections 4000;
    use epoll;
    multi_accept on;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    lua_shared_dict nginx_cache 10m;
    
    resolver 8.8.8.8;

    server {
        server_name ~^(?<app_name>.+)\.(expos\.es)$;
        listen 80;

        set $app_key $app_name;

        location / {
            set $backend_ip "";
            
            access_by_lua_block {
                local cache = ngx.shared.nginx_cache
                local cache_key = ngx.var.app_key

                local cached_ip, flags = cache:get(cache_key)

                if cached_ip then
                    ngx.var.backend_ip = cached_ip
                else
                    local app_name = ngx.var.app_name

                    local backend_ip_response = ngx.location.capture(
                        "http://localhost:3000/checkIfTunnelExists",
                        { args = { app_name = app_name } }
                    )

                    if backend_ip_response.status == 200 then
                        local response_data = ngx.decode_json(backend_ip_response.body)

                        ngx.var.backend_ip = response_data.ipv6
                        cache:set(cache_key, ngx.var.backend_ip)
                    else
                        ngx.log(ngx.ERR, "No EXPOSE tunnel available here.")
                        ngx.exit(404)
                        return
                    end
                    
                end
            }

            rewrite ^/(.*)$ /$app_name$uri break;
            proxy_pass http://[$backend_ip]:8080;
            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            error_page 400 401 402 403 404 500 501 502 503 504 = @handle_proxy_pass_error;
        }

        location @handle_proxy_pass_error {
            set $cache_key_to_delete $app_key;
            content_by_lua_block {
                local cache = ngx.shared.nginx_cache
                cache:delete(ngx.var.cache_key_to_delete)
                ngx.say("No EXPOSE tunnel available here.")
                ngx.exit(404)
                return
            }
        }

        server_tokens off;
    }

    server {
        server_name localhost;
        listen [::]:8080;

        error_page 502 /notunnel.txt;
        location = /notunnel.txt {
            return 200 "Cannot connect to your local application. Please check your terminal for hints.";
            internal;
        }

        location ~ ^/(?<app_name>[^/]+)/(.*) {
            set $socket_path /expose.sh/sshserver/sockets/${app_name}.sock;
            set $sponsor_file /expose.sh/sshserver/sockets/${app_name}.sponsor;
            set $rate_limit 0;

            content_by_lua_block {
                local sponsor_file = ngx.var.sponsor_file
                local file = io.open(sponsor_file, "r")
                if file == nil then
                    ngx.var.rate_limit = 100k;
                end
                file:close()

                local socket_path = ngx.var.socket_path
                local file = io.open(socket_path, "r")
                if file == nil then
                    ngx.status = 404
                    ngx.say("No EXPOSE tunnel available here.")
                    ngx.exit(404)
                end
                file:close()
            }

            rewrite ^/(?<app_name>[^/]+)/(.*) /$2 break;
            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            limit_rate $rate_limit;
            limit_rate_after 512;
            proxy_pass http://unix:/expose.sh/sshserver/sockets/${app_name}.sock;
        }

        server_tokens off;
    }

    server {
        server_name localhost;
        listen [::]:8081;

        location = /cache/add {
            content_by_lua_block {
                local cache = ngx.shared.nginx_cache
                local args = ngx.req.get_uri_args()

                local app_name = args.app_name
                local ipv6 = args.ipv6

                if app_name and ipv6 then
                    cache:set(app_name, ipv6)
                    ngx.exit(200)
                    return
                else
                    ngx.exit(400)
                    return
                end
            }
        }

        location = /cache/remove {
            content_by_lua_block {
                local cache = ngx.shared.nginx_cache
                local args = ngx.req.get_uri_args()

                local app_name = args.app_name

                if app_name then
                    cache:delete(app_name)
                    ngx.exit(200)
                    return
                else
                    ngx.exit(400)
                    return
                end
            }
        }

        location = /check/tunnel {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                local app_name = args.app_name

                local extensions = {".sponsor", ".free"}
                local base_path = "/expose.sh/sshserver/sockets/"
                local file_found = false

                for _, ext in ipairs(extensions) do
                    local file_path = base_path .. app_name .. ext
                    local file = io.open(file_path, "r")
                    if file then
                        file:close()
                        file_found = true
                        break
                    end
                end

                if file_found then
                    ngx.exit(200)
                else
                    ngx.exit(404)
                end
            }
        }

        server_tokens off;
    }

    server {
        server_name expose.sh;
        listen 80;

        location / {
            return 302 https://github.com/exposesh;
        }

        server_tokens off;
    }

    server {
        server_name expos.es;
        listen 80;

        location / {
            return 302 https://github.com/exposesh;
        }

        server_tokens off;
    }
}